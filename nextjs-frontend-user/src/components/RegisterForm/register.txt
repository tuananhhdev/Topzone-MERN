import React from "react";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useForm } from "react-hook-form";

interface RegisterFormInputs {
  email: string;
  last_name: string;
  first_name: string;
  phone_number: string;
  password: string;
  re_pass: string;
  street?: string;
  city?: string;
  state?: string;
  zip_code?: string;
}

// Schema validation using Yup
const schema = yup.object({
  email: yup
    .string()
    .required("Vui lòng nhập email")
    .email("Email không hợp lệ"),
  last_name: yup.string().required("Vui lòng nhập họ"),
  first_name: yup.string().required("Vui lòng nhập tên"),
  phone_number: yup
    .string()
    .required("Vui lòng nhập số điện thoại")
    .matches(/^\d+$/, "Số điện thoại chỉ chứa chữ số"),
  password: yup
    .string()
    .required("Vui lòng nhập mật khẩu")
    .min(4, "Mật khẩu có ít nhất 4 ký tự"),
  re_pass: yup
    .string()
    .required("Vui lòng nhập lại mật khẩu")
    .min(4, "Mật khẩu có ít nhất 4 ký tự")
    .oneOf([yup.ref("password")], "Mật khẩu nhập lại không khớp"),
  street: yup.string(),
  city: yup.string(),
  state: yup.string(),
  zip_code: yup.string(),
});

const RegisterForm: React.FC = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterFormInputs>({
    resolver: yupResolver(schema),
  });

  const onSubmit = (data: RegisterFormInputs) => {
    console.log("Form Data Submitted:", data);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 shadow-md rounded-lg max-w-lg w-full">
        <h2 className="text-2xl font-semibold text-center mb-6">Đăng Ký</h2>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          {/* Email */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium">
              Email
            </label>
            <input
              id="email"
              type="email"
              {...register("email")}
              className={`mt-1 w-full p-2 border ${
                errors.email ? "border-red-500" : "border-gray-300"
              } rounded`}
            />
            {errors.email && (
              <p className="text-red-500 text-sm">{errors.email.message}</p>
            )}
          </div>

          {/* Last Name */}
          <div>
            <label htmlFor="last_name" className="block text-sm font-medium">
              Họ
            </label>
            <input
              id="last_name"
              type="text"
              {...register("last_name")}
              className={`mt-1 w-full p-2 border ${
                errors.last_name ? "border-red-500" : "border-gray-300"
              } rounded`}
            />
            {errors.last_name && (
              <p className="text-red-500 text-sm">{errors.last_name.message}</p>
            )}
          </div>

          {/* First Name */}
          <div>
            <label htmlFor="first_name" className="block text-sm font-medium">
              Tên
            </label>
            <input
              id="first_name"
              type="text"
              {...register("first_name")}
              className={`mt-1 w-full p-2 border ${
                errors.first_name ? "border-red-500" : "border-gray-300"
              } rounded`}
            />
            {errors.first_name && (
              <p className="text-red-500 text-sm">
                {errors.first_name.message}
              </p>
            )}
          </div>

          {/* Phone Number */}
          <div>
            <label htmlFor="phone_number" className="block text-sm font-medium">
              Số Điện Thoại
            </label>
            <input
              id="phone_number"
              type="text"
              {...register("phone_number")}
              className={`mt-1 w-full p-2 border ${
                errors.phone_number ? "border-red-500" : "border-gray-300"
              } rounded`}
            />
            {errors.phone_number && (
              <p className="text-red-500 text-sm">
                {errors.phone_number.message}
              </p>
            )}
          </div>

          {/* Password */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium">
              Mật Khẩu
            </label>
            <input
              id="password"
              type="password"
              {...register("password")}
              className={`mt-1 w-full p-2 border ${
                errors.password ? "border-red-500" : "border-gray-300"
              } rounded`}
            />
            {errors.password && (
              <p className="text-red-500 text-sm">{errors.password.message}</p>
            )}
          </div>

          {/* Confirm Password */}
          <div>
            <label htmlFor="re_pass" className="block text-sm font-medium">
              Nhập Lại Mật Khẩu
            </label>
            <input
              id="re_pass"
              type="password"
              {...register("re_pass")}
              className={`mt-1 w-full p-2 border ${
                errors.re_pass ? "border-red-500" : "border-gray-300"
              } rounded`}
            />
            {errors.re_pass && (
              <p className="text-red-500 text-sm">{errors.re_pass.message}</p>
            )}
          </div>

          {/* Street */}
          <div>
            <label htmlFor="street" className="block text-sm font-medium">
              Đường
            </label>
            <input
              id="street"
              type="text"
              {...register("street")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {/* City */}
          <div>
            <label htmlFor="city" className="block text-sm font-medium">
              Thành Phố
            </label>
            <input
              id="city"
              type="text"
              {...register("city")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {/* State */}
          <div>
            <label htmlFor="state" className="block text-sm font-medium">
              Tỉnh/Bang
            </label>
            <input
              id="state"
              type="text"
              {...register("state")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {/* ZIP Code */}
          <div>
            <label htmlFor="zip_code" className="block text-sm font-medium">
              ZIP Code
            </label>
            <input
              id="zip_code"
              type="text"
              {...register("zip_code")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition"
          >
            Đăng Ký
          </button>
        </form>
      </div>
    </div>
  );
};

export default RegisterForm;



import React from "react";
import { useFormik } from "formik";
import * as Yup from "yup";

const RegisterForm = () => {
  // Schema validation using Yup
  const validationSchema = Yup.object({
    email: Yup.string()
      .required("Vui lòng nhập email")
      .email("Email không hợp lệ"),
    last_name: Yup.string().required("Vui lòng nhập họ"),
    first_name: Yup.string().required("Vui lòng nhập tên"),
    phone_number: Yup.string()
      .required("Vui lòng nhập số điện thoại")
      .matches(/^\d+$/, "Số điện thoại chỉ chứa chữ số"),
    password: Yup.string()
      .required("Vui lòng nhập mật khẩu")
      .min(4, "Mật khẩu có ít nhất 4 ký tự"),
    re_pass: Yup.string()
      .required("Vui lòng nhập lại mật khẩu")
      .oneOf([Yup.ref("password")], "Mật khẩu nhập lại không khớp"),
    street: Yup.string(),
    city: Yup.string(),
    state: Yup.string(),
    zip_code: Yup.string(),
  });

  const formik = useFormik({
    initialValues: {
      email: "",
      last_name: "",
      first_name: "",
      phone_number: "",
      password: "",
      re_pass: "",
      street: "",
      city: "",
      state: "",
      zip_code: "",
    },
    validationSchema,
    onSubmit: (values) => {
      console.log("Form Data Submitted:", values);
    },
  });

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 shadow-md rounded-lg max-w-lg w-full">
        <h2 className="text-2xl font-semibold text-center mb-6">Đăng Ký</h2>
        <form onSubmit={formik.handleSubmit} className="space-y-4">
          {/* Email */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium">
              Email
            </label>
            <input
              id="email"
              type="email"
              {...formik.getFieldProps("email")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
            {formik.touched.email && formik.errors.email ? (
              <p className="text-red-500 text-sm">{formik.errors.email}</p>
            ) : null}
          </div>

          {/* Last Name */}
          <div>
            <label htmlFor="last_name" className="block text-sm font-medium">
              Họ
            </label>
            <input
              id="last_name"
              type="text"
              {...formik.getFieldProps("last_name")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
            {formik.touched.last_name && formik.errors.last_name ? (
              <p className="text-red-500 text-sm">{formik.errors.last_name}</p>
            ) : null}
          </div>

          {/* First Name */}
          <div>
            <label htmlFor="first_name" className="block text-sm font-medium">
              Tên
            </label>
            <input
              id="first_name"
              type="text"
              {...formik.getFieldProps("first_name")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
            {formik.touched.first_name && formik.errors.first_name ? (
              <p className="text-red-500 text-sm">{formik.errors.first_name}</p>
            ) : null}
          </div>

          {/* Phone Number */}
          <div>
            <label htmlFor="phone_number" className="block text-sm font-medium">
              Số Điện Thoại
            </label>
            <input
              id="phone_number"
              type="text"
              {...formik.getFieldProps("phone_number")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
            {formik.touched.phone_number && formik.errors.phone_number ? (
              <p className="text-red-500 text-sm">
                {formik.errors.phone_number}
              </p>
            ) : null}
          </div>

          {/* Password */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium">
              Mật Khẩu
            </label>
            <input
              id="password"
              type="password"
              {...formik.getFieldProps("password")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
            {formik.touched.password && formik.errors.password ? (
              <p className="text-red-500 text-sm">{formik.errors.password}</p>
            ) : null}
          </div>

          {/* Confirm Password */}
          <div>
            <label htmlFor="re_pass" className="block text-sm font-medium">
              Nhập Lại Mật Khẩu
            </label>
            <input
              id="re_pass"
              type="password"
              {...formik.getFieldProps("re_pass")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
            {formik.touched.re_pass && formik.errors.re_pass ? (
              <p className="text-red-500 text-sm">{formik.errors.re_pass}</p>
            ) : null}
          </div>

          {/* Street */}
          <div>
            <label htmlFor="street" className="block text-sm font-medium">
              Đường
            </label>
            <input
              id="street"
              type="text"
              {...formik.getFieldProps("street")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {/* City */}
          <div>
            <label htmlFor="city" className="block text-sm font-medium">
              Thành Phố
            </label>
            <input
              id="city"
              type="text"
              {...formik.getFieldProps("city")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {/* State */}
          <div>
            <label htmlFor="state" className="block text-sm font-medium">
              Tỉnh/Bang
            </label>
            <input
              id="state"
              type="text"
              {...formik.getFieldProps("state")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {/* ZIP Code */}
          <div>
            <label htmlFor="zip_code" className="block text-sm font-medium">
              ZIP Code
            </label>
            <input
              id="zip_code"
              type="text"
              {...formik.getFieldProps("zip_code")}
              className="mt-1 w-full p-2 border border-gray-300 rounded"
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition"
          >
            Đăng Ký
          </button>
        </form>
      </div>
    </div>
  );
};

export default RegisterForm;
